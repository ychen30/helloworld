let x = 1;
let y = 1;
let easing = 0.05;

function setup() {
  createCanvas(300, 400);

}

function draw() {
  background (3,27,136);
  
  //block1
  fill(169,182,252);
  noStroke();
  rect(80,0,250,60);
  
  //block2
  fill(169,182,252);
  noStroke();
  rect(0,130,150,200);
  
  //block3
  fill(169,182,252);
  noStroke();
  rect(240,130,60,200);
  
  //fin
  fill(255);
  stroke(169,182,252);
  strokeWeight(3);
  rect(10, 350, 60, 30, 15);
 
  
  //ball moving
  let targetX = mouseX;
  let dx = targetX - x;
  x += dx * easing;

  let targetY = mouseY;
  let dy = targetY - y;
  y += dy * easing;
  
  //ball
  noStroke();
  fill(255);
  ellipse(x, y, 20, 20);
    tint(255, 100);

  
  if ( 65< x && x < 300 && y <70) {
    fill(255,0,0);
    rect(0, 0, 300, 400);
  } else if ( 0<x && x<160 && y>115 && y<345){
    fill(255,0,0);
    rect(0, 0, 300, 400);
  } else if ( 230<x && x<300 && y>120 && y<340) {
    fill(255,0,0);
    rect(0, 0, 300, 400);
             }
    
}


////////////////////////////////////////////////////////////////

var serial;          // variable to hold an instance of the serialport library
var portName = '/dev/tty.usbserial-1420';  // fill in your serial port name here
var inData;
var xPos = 0;
var t = 0; // time variable



function setup() {
createCanvas(800, 600);
createCanvas(800, 600);
  
background(0x08, 0x16, 0x40);
noStroke();
fill(169, 182, 252);
  
  
serial = new p5.SerialPort();       // make a new instance of the serialport library
serial.on('connected', serverConnected); // callback for connecting to the server
serial.on('open', portOpen);        // callback for the port opening
serial.on('data', serialEvent);     // callback for when new data arrives
serial.on('error', serialError);    // callback for errors
serial.on('close', portClose);      // callback for the port closing
serial.list();                      // list the serial ports
serial.open(portName);              // open a serial port
}
function serverConnected() {
console.log('connected to server.');
}
function portOpen() {
console.log('the serial port opened.')
}
function serialEvent() {
inData = Number(serial.read());
}
function serialError(err) {
console.log('Something went wrong with the serial port. ' + err);
}
function portClose() {
console.log('The serial port closed.');
}
function draw() {
//graphData(inData);
background(10, 10); // translucent background (creates trails)
// make a x and y grid of ellipses
for (var x = 0; x <= width; x = x + 100) {
  for (var y = 0; y <= height; y = y + 100) {
    // starting point of each circle depends on mouse position
    const xAngle = map(inData, 0, width, -4 * PI, 4 * PI, true);
    const yAngle = map(inData, 0, height, -4 * PI, 4 * PI, true);
    // and also varies based on the particleâ€™s location
    const angle = xAngle * (x / width) + yAngle * (y / height);
    // each particle moves in a circle
    const myX = x + 40 * cos(2 * PI * t + angle);
    const myY = y + 40 * sin(2 * PI * t + angle);
    ellipse( myX, myY, 10); // draw particle
}
t = t + 1.5; // update time
  
  }
}
/*function graphData(inData) {
// map the range of the input to the window height:
var yPos = map(inData, 0, 255, 0, height);
// draw the line in a pretty color:
stroke(0xA8, 0xD9, 0xA7);
line(xPos, height, xPos, height - yPos);
// at the edge of the screen, go back to the beginning:
if (xPos >= width) {
  xPos = 0;
  // clear the screen by resetting the background:
  background(0x08, 0x16, 0x40);
} else {
  // increment the horizontal position for the next reading:
  xPos++;
}*/

